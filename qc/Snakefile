import glob
import os

configfile: "config.yaml"

# detect samples based on sorted.bam, which is common between the ONT and Illumina pipeline
bam_suffix = ".sorted.bam"

def get_bam_pattern():
    return config.get("bam_pattern", "{data_root}/{sample}.sorted.bam")

def get_consensus_pattern():
    if config['platform'] == 'illumina':
        return config.get("consensus_pattern", "{data_root}/{sample}.primertrimmed.consensus.fa")
    elif config['platform'] == 'oxford-nanopore':
        return config.get("consensus_pattern", "{data_root}/{sample}.consensus.fasta")

def get_variants_pattern():
    if config['platform'] == 'illumina':
        return config.get("variants_pattern", "{data_root}/{sample}.variants.tsv")
    elif config['platform'] == 'oxford-nanopore':
        return config.get("variants_pattern", "{data_root}/{sample}.pass.vcf.gz")

def get_metadata_file(wildcards):
    return config.get("metadata", "").format(data_root=config["data_root"])

def get_run_name(wildcards=None):
    return config.get("run_name", "default")

def get_sample_names():

    # if defined in the config, use that
    # otherwise we try to auto-detect based on the bam names
    if "samples" in config:
        return config["samples"]

    # get all bams in the data directory based on the pattern
    # the bam files follow
    pattern = get_bam_pattern()

    # form a glob we can use to get the bam files for each sample
    gs = pattern.format(data_root=config["data_root"], sample="*")

    bams = glob.glob(gs)
    samples = list()
    for b in bams:
        f = os.path.basename(b)
        fields = f.split(".")
        samples.append(fields[0])

    # remove any possible duplicates
    return list(set(samples))

def get_primer_bed(wildcards):
    '''
    Get the path to the BED file containing amplicon primers.
    '''
    return config.get("primer_bed", "")

def get_primer_offset(wildcards):
    '''
    Get the number of bases to offset the primer when removing primers from amplicon BED
    '''
    return config.get("primer_offset", "0")

def get_primer_bed_type_opt(wildcards):
    '''
    Get option bed_type from config.yaml
    '''
    return config.get("bed_type", "unique_amplicons")

def get_negative_control_samples():
    if "negative_control_samples" in config:
        return config["negative_control_samples"]
    else:
        return []

# negative controls may not have bams so we need to filter
# out those that don't have alignments
def get_negative_control_bed(wildcards):
    bp = get_bam_pattern()
    out = list()
    for s in get_negative_control_samples():
        bam = bp.format(data_root=config["data_root"], sample=s)
        if os.path.exists(bam):
            out.append("qc_sequencing/{sample}.amplicon_base_coverage.bed".format(sample=s))
    return out

def get_amplicon_bed(wildcards):
    return config["amplicon_bed"].format(data_root=config["data_root"])

def get_reference_genome(wildcards):
    return config["reference_genome"].format(data_root=config["data_root"])

def get_reference_genome_fai(wildcards):
    return get_reference_genome(wildcards) + ".fai"

def get_bam_for_sample(wildcards):
    bam_pattern = get_bam_pattern()
    return bam_pattern.format(data_root=config["data_root"], sample=wildcards.sample)

def get_primer_trimmed_bam_for_sample(wildcards):
    pt_bam_pattern = get_bam_pattern()
    if "platform" not in config:
        sys.stderr.write("Error: platform not defined in config")
        sys.exit(1)

    if config['platform'] == 'oxford-nanopore':
        return "%s/{sample}.primertrimmed.rg.sorted.bam" % config['data_root']
    elif config['platform'] == 'illumina':
        return "%s/{sample}.mapped.primertrimmed.sorted.bam" % config['data_root']
    else:
        sys.stderr.write("Error: unrecognized platform")
        sys.exit(1)

def get_completeness_threshold(wildcards):
    return config.get("completeness_threshold", 0.75)

def get_completeness_threshold_opt(wildcards):
    completeness = get_completeness_threshold(wildcards)
    if completeness != "":
        return "--completeness %s" % (completeness)
    else:
        return ""

def get_tree_consensus_sequences(wildcards):
    pattern = get_consensus_pattern()
    consensus_sequences = [pattern.format(data_root=config["data_root"], sample=s) for s in get_sample_names()]

    if "tree_include_consensus" in config:
        consensus_sequences.append(config["tree_include_consensus"])

    return consensus_sequences

def get_tree_plot_input(wildcards):

    input_list = ["qc_analysis/{prefix}_tree.nwk", "qc_analysis/{prefix}_alleles.tsv"]
    if "assign_lineages" in config and config["assign_lineages"]:
        input_list.append("lineages/{prefix}_lineage_report.csv")
    return input_list

def get_qc_sequencing_plots(wildcards):
    prefix = get_run_name()
    out = [ "plots/%s_amplicon_covered_fraction.pdf" % (prefix),
            "plots/%s_depth_by_position.pdf" % (prefix) ]

    # add plots that need Ct values
    if get_metadata_file(wildcards) != "":
        out.append("plots/%s_amplicon_depth_by_ct.pdf" % (prefix))
    return out

def get_qc_analysis_plots(wildcards):
    prefix = get_run_name()
    out = [ "plots/%s_tree_snps.pdf" % (prefix),
            "plots/%s_amplicon_coverage_heatmap.pdf" % (prefix) ]
    return out

def get_all_qc_analysis_plots(wildcards):
    prefix = get_run_name()
    out = [ "plots/%s_tree_snps.pdf" % (prefix),
            "plots/%s_amplicon_coverage_heatmap.pdf" % (prefix) ]
    if get_metadata_file(wildcards) != "":
        out.append("plots/%s_genome_completeness_by_ct.pdf" % (prefix))
    return out

def get_qc_summary(wildcards):
    prefix = get_run_name()
    return "qc_reports/%s_summary_qc.tsv" % (prefix)

def get_qc_summary_metadata_opt(wildcards):
    metadata = get_metadata_file(wildcards)
    if metadata != "":
        return "--meta %s" % (metadata)
    else:
        return ""

def get_variants(wildcards):
    pattern = get_variants_pattern()
    return pattern.format(data_root=config['data_root'], sample=wildcards.sample)

def get_platform_opt(wildcards):
    if "platform" in config:
        return "--platform %s" % (config['platform'])
    else:
        return ""

def get_run_name_opt(wildcards):
    return get_run_name()

def get_consensus(wildcards):
    pattern = get_consensus_pattern()
    return pattern.format(data_root=config['data_root'], sample=wildcards.sample)

def get_run_alleles(wildcards):
    rn = get_run_name()
    return "qc_analysis/%s_alleles.tsv" % (rn)

def get_negative_control_report(wildcards):
    rn = get_run_name()
    return "qc_reports/%s_negative_control_report.tsv" % (rn)

def get_mixture_report(wildcards):
    rn = get_run_name()
    return "qc_reports/%s_mixture_report.tsv" % (rn)

def get_ambiguous_report(wildcards):
    rn = get_run_name()
    return "qc_reports/%s_ambiguous_position_report.tsv" % (rn)

def get_qc_reports(wildcards):
    out = [ get_qc_summary(wildcards) ]

    # currently these reports are only generated for illumina data
    if config.get("platform") == "illumina":
        out.append(get_mixture_report(wildcards))
        out.append(get_ambiguous_report(wildcards))

    # only try to make negative control report if NC samples have been defined
    if len(get_negative_control_samples()) > 0:
        out.append(get_negative_control_report(wildcards))
    return out

def get_report_tex_input(wildcards):
    out = get_qc_reports(wildcards)
    out.append("plots/%s_tree_snps.pdf" % (wildcards.prefix))
    if len(get_negative_control_samples()) > 0:
        out.append("plots/%s_depth_by_position_negative_control.pdf" % (wildcards.prefix))
    return out

def get_final_pdf_report(wildcards):
    rn = get_run_name()
    return "qc_reports/%s.pdf" % (rn)

def get_annotated_variants(wildcards):
    pattern = "qc_annotation/{sample}.NC_045512v2_multianno.txt"
    out = [pattern.format(sample=s) for s in get_sample_names()]
    return out

def get_sarscov2db_opt(wildcards):
    return config.get("sarscov2db", "")

def get_threshold_opt(wildcards):
    if "recurrent_threshold" in config:
        return f"--threshold {config['recurrent_threshold']}"
    else:
        return ""

def get_aa_heatmap_basesize_opt(wildcards):
    if "basesize_recurrent_heatmap" in config:
        return f"--base_size {config['basesize_recurrent_heatmap']}"
    else:
        return ""

def get_aa_heatmap(wildcards):
    prefix = get_run_name()
    return f"plots/{prefix}_aa_mutation_heatmap.pdf"
#
# top-level rules
#
rule all_qc_sequencing:
    input:
        get_qc_sequencing_plots

rule all_qc_analysis:
    input:
        get_qc_analysis_plots

rule all_qc_analysis_plots:
    input:
        get_all_qc_analysis_plots

rule all_qc_summary:
    input:
        get_qc_summary

rule all_qc_negative_control:
    input:
        get_negative_control_report

rule all_mixture_report:
    input:
        get_mixture_report

rule all_ambiguous_report:
    input:
        get_ambiguous_report

rule all_qc_reports:
    input:
        get_qc_reports

rule all_final_report:
    input:
        get_final_pdf_report

rule create_amplicon_bed:
    input:
        "bed/amplicon.bed"

rule annotate_variants:
    input:
        get_aa_heatmap

#
# generate coverage QC data using bedtools
#
rule make_amplicon_mean_coverage:
    input:
        bam=get_bam_for_sample,
        #bed=get_amplicon_bed
        bed="bed/amplicon.bed"
    output:
        "qc_sequencing/{sample}.mean_coverage.bed"
    params:
        memory_per_thread="2G"
    threads: 1
    shell:
        "echo -e \"reference_name\tstart\tend\tamplicon_id\tpool\tstrand\tmean_coverage\" > {output};"
        "bedtools coverage -mean -a {input.bed} -b {input.bam} >> {output}"

rule make_amplicon_coverage:
    input:
        bam=get_bam_for_sample,
        #bed=get_amplicon_bed
        bed="bed/amplicon.bed"
    output:
        "qc_sequencing/{sample}.amplicon_coverage.bed"
    params:
        memory_per_thread="2G"
    threads: 1
    shell:
        "echo -e \"reference_name\tstart\tend\tamplicon_id\tpool\tstrand\tread_count\tcovered_bases\tamplicon_length\tfraction_covered\" > {output};"
        "bedtools coverage -a {input.bed} -b {input.bam} >> {output}"

rule make_amplicon_depth:
    input:
        bam=get_bam_for_sample,
        #bed=get_amplicon_bed
        bed="bed/amplicon.bed"
    output:
        "qc_sequencing/{sample}.amplicon_depth.bed"
    params:
        memory_per_thread="2G"
    threads: 1
    shell:
        "echo -e \"reference_name\tstart\tend\tamplicon_id\tpool\tstrand\tmean_depth\" > {output};"
        "bedtools coverage -mean -a {input.bed} -b {input.bam} >> {output}"

rule make_amplicon_base_coverage:
    input:
        bam=get_bam_for_sample,
        #bed=get_amplicon_bed
        bed="bed/amplicon.bed"
    output:
        "qc_sequencing/{sample}.amplicon_base_coverage.bed"
    params:
        memory_per_thread="2G"
    threads: 1
    shell:
        "echo -e \"reference_name\tstart\tend\tamplicon_id\tpool\tstrand\tposition\tdepth\" > {output};"
        "bedtools coverage -d -a {input.bed} -b {input.bam} >> {output}"

# https://bioinformatics.stackexchange.com/questions/91/how-to-convert-fasta-to-bed
rule make_genome_bed:
    input:
        get_reference_genome_fai
    output:
        "bed/genome.bed"
    shell:
        "cat {input} | awk '{{ print $1 \"\t0\t\" $2 }}' > {output}"

rule make_genome_per_base_coverage:
    input:
        bam=get_bam_for_sample,
        bed="bed/genome.bed"
    output:
        "{directory}/{sample}.per_base_coverage.bed"
    params:
        memory_per_thread="2G"
    threads: 1
    shell:
        "echo -e \"reference_name\tstart\tend\tposition\tdepth\" > {output};"
        "bedtools coverage -d -a {input.bed} -b {input.bam} >> {output}"

# pysam's index_filename option is broken so we have
# to do some hacky symlinking to work around it
rule make_tmp_bam:
    input:
        get_primer_trimmed_bam_for_sample
    output:
        "tmp_bam/{sample}.bam"
    shell:
        "ln -s \"$(readlink -f {input})\" {output}"

rule make_bam_index:
    input:
        "{prefix}.bam"
    output:
        "{prefix}.bam.bai"
    shell:
        "samtools index {input}"

rule make_formatted_pileup:
    input:
        bam="tmp_bam/{sample}.bam",
        bai="tmp_bam/{sample}.bam.bai",
        reference=get_reference_genome
    output:
        "qc_sequencing/{sample}.fpileup.tsv"
    params:
        pileup_script = srcdir("format_pileup.py")
    shell:
        "python {params.pileup_script} --bam {input.bam} --reference {input.reference} > {output}"

rule merge_artic_qc:
    input:
        expand(config["data_root"] + "/{s}.qc.csv", s=get_sample_names())
    output:
        "qc_analysis/merged.qc.csv"
    shell:
        "cat {input} | awk 'NR == 1 || $0 !~ /qc_pass/' > {output}"

#
# Perform a multiple alignment with mafft and build a tree
#
rule make_merged_consensus:
    input:
        get_tree_consensus_sequences
    output:
        "qc_analysis/{prefix}_consensus.fasta"
    params:
        completeness_opt=get_completeness_threshold_opt,
        rename_script = srcdir("../tree/preprocess_consensus.py")
    shell:
        "python {params.rename_script} {params.completeness_opt} {input} > {output}"

rule make_msa:
    input:
        consensus="qc_analysis/{prefix}_consensus.fasta",
        reference=get_reference_genome
    output:
        "qc_analysis/{prefix}_aligned.fasta"
    shell:
        "augur align --sequences {input.consensus} --reference-sequence {input.reference} --output {output} --fill-gaps"

rule make_tree_raw:
    input:
        "qc_analysis/{prefix}_aligned.fasta"
    output:
        "qc_analysis/{prefix}_tree_raw.nwk"
    shell:
        "augur tree --alignment {input} --output {output}"

rule make_tree_final:
    input:
        tree="qc_analysis/{prefix}_tree_raw.nwk",
        reference=get_reference_genome
    output:
        "qc_analysis/{prefix}_tree.nwk"
    shell:
        "nw_reroot {input} `head -1 {input.reference} | tr -d \">\"` > {output}"

rule make_alleles:
    input:
        "qc_analysis/{prefix}_aligned.fasta"
    output:
        "qc_analysis/{prefix}_alleles.tsv"
    params:
        alleles_script = srcdir("../tree/align2alleles.py")
    shell:
        "python {params.alleles_script} --reference-name MN908947.3 {input} > {output}"

rule make_lineage_assignments:
    input:
        "qc_analysis/{prefix}_consensus.fasta"
    output:
        "lineages/{prefix}_lineage_report.csv"
    threads: workflow.cores
    shell:
        "pangolin -t {threads} --outfile {output} {input}"
#
# QC plots
#
rule make_qc_plot_amplicon_coverage_heatmap:
    input:
        expand("qc_sequencing/{s}.amplicon_depth.bed", s=get_sample_names())
    output:
        plot="plots/{prefix}_amplicon_coverage_heatmap.pdf",
        table="qc_analysis/{prefix}_amplicon_coverage_table.tsv"
    params:
        plot_script = srcdir("plot_amplicon_coverage_heatmap.R")
    shell:
        "Rscript {params.plot_script} --path qc_sequencing --output {output.plot} --table {output.table}"

rule make_qc_plot_depth_by_position:
    input:
        expand("qc_sequencing/{s}.per_base_coverage.bed", s=get_sample_names())
    output:
        "plots/{prefix}_depth_by_position.pdf"
    params:
        plot_script = srcdir("plot_qc_sequencing.R"),
        metadata=get_metadata_file
    shell:
        "Rscript {params.plot_script} depth_by_position {wildcards.prefix} {params.metadata}"

rule make_qc_plot_depth_by_position_negative_controls:
    input:
        expand("qc_sequencing_negative_control/{s}.per_base_coverage.bed", s=get_negative_control_samples())
    output:
        "plots/{prefix}_depth_by_position_negative_control.pdf"
    params:
        plot_script = srcdir("plot_qc_sequencing.R"),
        metadata=get_metadata_file
    shell:
        "Rscript {params.plot_script} negative_control_depth_by_position {wildcards.prefix} {params.metadata}"

rule make_qc_plot_amplicon_depth_by_ct:
    input:
        files=expand("qc_sequencing/{s}.amplicon_depth.bed", s=get_sample_names()),
        metadata=get_metadata_file
    output:
        "plots/{prefix}_amplicon_depth_by_ct.pdf"
    params:
        plot_script = srcdir("plot_qc_sequencing.R")
    shell:
        "Rscript {params.plot_script} amplicon_depth_by_ct {wildcards.prefix} {input.metadata}"

rule make_qc_plot_fraction_covered_by_amplicon:
    input:
        expand("qc_sequencing/{s}.amplicon_coverage.bed", s=get_sample_names())
    output:
        "plots/{prefix}_amplicon_covered_fraction.pdf"
    params:
        plot_script = srcdir("plot_qc_sequencing.R")
    shell:
        "Rscript {params.plot_script} amplicon_covered_fraction {wildcards.prefix}"

rule make_qc_genome_completeness_by_ct:
    input:
        qc="qc_analysis/merged.qc.csv",
        metadata=get_metadata_file
    output:
        "plots/{prefix}_genome_completeness_by_ct.pdf"
    params:
        plot_script = srcdir("plot_qc_sequencing.R")
    shell:
        "Rscript {params.plot_script} genome_completeness_by_ct {wildcards.prefix} {input.metadata}"

rule make_qc_tree_snps:
    input: get_tree_plot_input
    output:
        "plots/{prefix}_tree_snps.pdf"
    params:
        plot_script = srcdir("../tree/plot_tree_snps.R")
    shell:
        "Rscript {params.plot_script} {output} {input}"

# generate the summary QC metrics
rule make_sample_qc_summary:
    input:
        alleles=get_run_alleles,
        samplecoverage="qc_sequencing/{sample}.per_base_coverage.bed",
        samplevariants=get_variants,
        sampleconsensus=get_consensus
    output:
        "qc_analysis/{sample}.summary.qc.tsv"
    params:
        py_script="get_qc.py",
        metadata_opt=get_qc_summary_metadata_opt,
        platform_opt=get_platform_opt,
        run_name_opt=get_run_name_opt
    shell:
        "{params.py_script} --alleles {input.alleles} --coverage {input.samplecoverage} --variants {input.samplevariants} {params.metadata_opt} --indel --consensus {input.sampleconsensus} {params.platform_opt} --sample {wildcards.sample} --run_name {params.run_name_opt} > {output}"

rule make_full_qc_summary:
    input:
        expand("qc_analysis/{s}.summary.qc.tsv", s=get_sample_names())
    output:
        "qc_reports/{prefix}_summary_qc.tsv"
    params:
        py_script="collect_qc_summary.py"
    shell:
        "{params.py_script} --path qc_analysis > {output}"

rule make_negative_control_report:
    input:
        bed=get_negative_control_bed
    output:
        "qc_reports/{prefix}_negative_control_report.tsv"
    params:
        script=srcdir("negative_control_check.py")
    shell:
        "python {params.script} {input.bed} > {output}"

rule make_fpileups_fofn:
    input:
        expand("qc_sequencing/{s}.fpileup.tsv", s=get_sample_names())
    output:
        "qc_sequencing/{prefix}_fpileups.fofn",
    shell:
        'echo {input} | tr " " "\\n" > {output}'

rule make_mixture_report:
    input:
        fpileups="qc_sequencing/{prefix}_fpileups.fofn",
        alleles="qc_analysis/{prefix}_alleles.tsv"
    output:
        "qc_reports/{prefix}_mixture_report.tsv"
    params:
        script=srcdir("mixture_check.py")
    shell:
        "python {params.script} --fpileup {input.fpileups} --alleles {input.alleles} > {output}"

rule make_ambiguous_position_report:
    input:
        alleles="qc_analysis/{prefix}_alleles.tsv"
    output:
        "qc_reports/{prefix}_ambiguous_position_report.tsv"
    params:
        script=srcdir("ambiguous_position_check.py")
    shell:
        "python {params.script} --alleles {input.alleles} --min-count 3 > {output}"

rule make_amplicon_bed:
    input:
        primers=get_primer_bed
    output:
        "bed/amplicon.bed"
    params:
        script="primers_to_amplicons.py",
        offset=get_primer_offset,
        bed_type_opt=get_primer_bed_type_opt
    shell:
        "{params.script} --primers {input.primers} --offset {params.offset} --bed_type {params.bed_type_opt} --output {output}"

rule make_report_tex:
    input:
        get_report_tex_input
    output:
        "qc_reports/{prefix}.tex"
    params:
        script=srcdir("generate_report.py"),
        run_name=get_run_name,
        platform_opt=get_platform_opt
    shell:
        "python {params.script} --run-name {params.run_name} {params.platform_opt} > {output}"

rule make_report_pdf:
    input:
        "qc_reports/{prefix}.tex"
    output:
        "qc_reports/{prefix}.pdf"
    shell:
        # The long table package needs pdflatex to be run up to 3 times
        # to correctly typeset the tables
        "pdflatex -output-directory qc_reports {input} &&"
        "pdflatex -output-directory qc_reports {input} &&"
        "pdflatex -output-directory qc_reports {input}"

rule run_table_annovar:
    input:
        "qc_annotation/{sample}.avinput"
    output:
        "qc_annotation/{sample}.NC_045512v2_multianno.txt"
    params:
        script="table_annovar.pl",
        buildver="NC_045512v2",
        sarscov2db=get_sarscov2db_opt,
        outfile="qc_annotation/{sample}"
    shell:
        "{params.script} --buildver {params.buildver} {input} {params.sarscov2db} -protocol avGene -operation g --remove --otherinfo --outfile {params.outfile}"

rule make_annovar_input:
    input:
        samplevariant=get_variants
    output:
        "qc_annotation/{sample}.avinput"
    params:
        script=srcdir("create_annovar_input.py")
    shell:
        "python {params.script} --file {input.samplevariant} --output {output}"

rule make_aa_heatmap:
    input:
        get_annotated_variants
    output:
        "plots/{prefix}_aa_mutation_heatmap.pdf"
    params:
        script=srcdir("plot_recurrent_variant_heatmap.R"),
        threshold_opt=get_threshold_opt,
        base_size_opt=get_aa_heatmap_basesize_opt
    shell:
        "Rscript {params.script} --path qc_annotation/ --output {output} {params.threshold_opt} {params.base_size_opt}"

